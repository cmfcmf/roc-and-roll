diff --git a/lib/peg.d.ts b/lib/peg.d.ts
index 2230d6eec291fbdedfabd0d3dda17cc1a22acb63..658cdaa97eed8c92d4f571711e7faea90c6e1b8c 100644
--- a/lib/peg.d.ts
+++ b/lib/peg.d.ts
@@ -385,6 +385,25 @@ export namespace parser {
     | EndExpectation
     | OtherExpectation;
 
+  interface SyntaxErrorConstructor {
+    new (
+      message: string,
+      expected: Expectation[] | null,
+      found: string | null,
+      location: LocationRange
+    ): SyntaxError;
+    readonly prototype: SyntaxError;
+
+    // Static methods
+    /**
+     * Constructs the human-readable message from the machine representation.
+     *
+     * @param expected Array of expected items, generated by the parser
+     * @param found Any text that will appear as found in the input instead of expected
+     */
+    buildMessage(expected: Expectation[], found: string): string;
+  }
+
   /** Thrown if the grammar contains a syntax error. */
   class SyntaxError extends Error {
     /** Location where error was originated. */
@@ -419,13 +438,6 @@ export namespace parser {
      * @returns the formatted error
      */
     format(sources: SourceText[]): string;
-    /**
-     * Constructs the human-readable message from the machine representation.
-     *
-     * @param expected Array of expected items, generated by the parser
-     * @param found Any text that will appear as found in the input instead of expected
-     */
-    static buildMessage(expected: Expectation[], found: string): string;
   }
 }
 
@@ -736,7 +748,7 @@ export interface ParserOptions {
 export interface Parser {
   parse(input: string, options?: ParserOptions): any;
 
-  SyntaxError: parser.SyntaxError;
+  SyntaxError: parser.SyntaxErrorConstructor;
 }
 
 export interface ParserTracer {
